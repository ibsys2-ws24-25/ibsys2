generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Material {
  id                      String                      @id
  name                    String                      @default("")
  itemValue               Float
  defaultStock            Int                         @default(100)
  MaterialsRequired       MaterialRequirement[]       @relation("RequirementToMaterial") // Materialien, die dieses Material benötigt
  MaterialsRequiredBy     MaterialRequirement[]       @relation("MaterialToRequirements") // Materialien, die dieses Material benötigen
  Warehouse               Warehouse[]
  Forecast                Forecast[]
  ProductionPlan          ProductionPlanDecision[]
  deliveryTime            Float?
  variance                Float?
  Order                   Order[]
  OrderDecision           OrderDecision[]
  AdditionalSale          AdditionalSale[]
  WaitingQueue            WaitingQueue[]
  Workplaces              WorkplaceMaterial[]
  ProductionListWorkplace productionListOfWorkplace[]
}

model MaterialRequirement {
  id                 Int      @id @default(autoincrement())
  materialId         String
  requiredMaterialId String
  Material           Material @relation("RequirementToMaterial", fields: [materialId], references: [id]) // Material, das dieses Material benötigt
  RequiredMaterial   Material @relation("MaterialToRequirements", fields: [requiredMaterialId], references: [id]) // Material, das benötigt wird
  sum                Int      @default(1)
}

model Period {
  id             Int                         @id
  created        DateTime                    @default(now())
  Warehouse      Warehouse[]
  Forecast       Forecast[]
  ProductionPlan ProductionPlanDecision[]
  Order          Order[]
  OrderDecision  OrderDecision[]
  AdditionalSale AdditionalSale[]
  WaitingQueue   WaitingQueue[]
  Workplace      Workplace[]
  ProductionList productionListOfWorkplace[]
  Result         Result[]
}

model Warehouse {
  id         Int      @id @default(autoincrement())
  Period     Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  Material   Material @relation(fields: [materialId], references: [id])
  amount     Int
  periodId   Int
  materialId String
}

model WorkplaceHelper {
  id                  String              @id @unique
  maxCapacityPerShift Int                 @default(2400)
  setupTime           Float
  Materials           WorkplaceMaterial[] @relation // Materials processed at this workplace
}

model Workplace {
  id             Int    @id @default(autoincrement())
  name           String
  capacity       Int
  overtime       Int?
  numberOfShifts Int    @default(1)
  periodId       Int
  Period         Period @relation(fields: [periodId], references: [id], onDelete: Cascade)
}

model WorkplaceMaterial {
  workplaceId      String
  materialId       String
  capacityRequired Int? // Capacity required to process this material at this workplace
  processingTime   Float? // in minutes
  procurementTime  Float // in minutes
  Workplace        WorkplaceHelper @relation(fields: [workplaceId], references: [id])
  Material         Material        @relation(fields: [materialId], references: [id])

  @@id([workplaceId, materialId])
}

model productionListOfWorkplace {
  id         Int      @id @default(autoincrement())
  periodId   Int
  materialId String
  quantity   Int
  priority   Int      @unique
  Period     Period   @relation(fields: [periodId], references: [id])
  Material   Material @relation(fields: [materialId], references: [id])

  @@map("productionList")
}

model Forecast {
  id         Int      @id @default(autoincrement())
  Period     Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  Material   Material @relation(fields: [materialId], references: [id])
  forPeriod  Int
  periodId   Int
  materialId String
  amount     Int

  @@unique([periodId, materialId, forPeriod])
}

model AdditionalSale {
  id         Int      @id @default(autoincrement())
  Period     Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  Material   Material @relation(fields: [materialId], references: [id])
  forPeriod  Int
  amount     Int
  periodId   Int
  materialId String

  @@unique([periodId, forPeriod, materialId])
}

model ProductionPlanDecision {
  id          Int      @id @default(autoincrement())
  Period      Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  Material    Material @relation(fields: [materialId], references: [id])
  periodId    Int
  materialId  String
  safetyStock Int
  productId   String
  forPeriod   Int?

  @@unique([periodId, materialId, productId, forPeriod])
}

model Order {
  orderId     Int?
  orderPeriod Int
  mode        Int
  Material    Material @relation(fields: [materialId], references: [id])
  Period      Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  amount      Int
  materialId  String
  periodId    Int

  @@unique([orderPeriod, materialId, periodId])
}

model OrderDecision {
  Period     Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  Material   Material @relation(fields: [materialId], references: [id])
  amount     Int
  mode       Int
  periodId   Int
  materialId String

  @@unique([periodId, materialId])
}

model Setting {
  name  String @id
  value String
}

model WaitingQueue {
  id          Int      @id @default(autoincrement())
  Period      Period   @relation(fields: [periodId], references: [id], onDelete: Cascade)
  orderId     Int
  firstBatch  Int?
  lastBatch   Int?
  Material    Material @relation(fields: [materialId], references: [id])
  amount      Int
  timeneed    Int
  periodId    Int
  materialId  String
  workplaceId Int?
}

model Result {
  periodId Int
  Period   Period @relation(fields: [periodId], references: [id])
  type     String
  current  Float
  average  Float

  @@unique([periodId, type])
}
